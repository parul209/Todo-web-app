{"version":3,"sources":["logo.svg","Modals/CreateTask.js","Modals/EditTask.js","Components/Card.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTask","modal","toggle","save","useState","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","handleSave","taskObj","isOpen","className","type","onChange","rows","color","onClick","EditTask","updateTask","useEffect","Name","Description","handleUpdate","preventDefault","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","backgroundColor","position","right","bottom","cursor","fontSize","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39c20a7e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react'\r\n\r\nimport { Button, Modal, ModalFooter,\r\n    ModalHeader, ModalBody} from \"reactstrap\"\r\nconst CreateTask = ({modal,toggle,save}) => {\r\n    const[taskName , setTaskName] = useState('');\r\n        const[description, setDescription] = useState('');\r\n        const handleChange = (e) => {\r\n            const {name,value} = e.target\r\n             \r\n\r\n            if(name===\"taskName\"){\r\n                setTaskName(value)\r\n            }\r\n            else{\r\n                setDescription(value)\r\n            }\r\n         }\r\n      const handleSave = () => {\r\n          let taskObj ={}\r\n          taskObj[\"Name\"] =taskName\r\n          taskObj[\"Description\"] = description\r\n          save(taskObj)\r\n      }\r\n    \r\n\r\n\t\r\n\treturn (\r\n\r\n\t\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader\r\n                    toggle={toggle}>Create Task</ModalHeader>\r\n                <ModalBody>\r\n                     <form>\r\n                         <div className=\"form-group\">\r\n                            <label>Task Name</label>\r\n                            <input type=\"text\" className=\"form-control\" value={taskName} onChange ={handleChange} name=\"taskName\"/>\r\n\r\n                         </div>\r\n                         <div className=\"form-group\">\r\n                             <label>Description</label>\r\n                             <textarea rows=\"5\" className=\"form-control\" value={description} onChange ={handleChange} name=\"description\"/>\r\n                         </div>\r\n\r\n\r\n\r\n\r\n                     </form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={handleSave}>Create</Button>\r\n                    <Button color=\"secondary\"onClick={handleSave}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t);\r\n}\r\n\r\n\r\n\r\n    \r\nexport default CreateTask\r\n","import React, {useEffect, useState} from 'react'\r\n\r\nimport { Button, Modal, ModalFooter,\r\n    ModalHeader, ModalBody} from \"reactstrap\"\r\nconst EditTask = ({modal,toggle,updateTask , taskObj}) => {\r\n    const[taskName , setTaskName] = useState('');\r\n        const[description, setDescription] = useState('');\r\n        const handleChange = (e) => {\r\n            const {name,value} = e.target\r\n             \r\n\r\n            if(name===\"taskName\"){\r\n                setTaskName(value)\r\n            }\r\n            else{\r\n                setDescription(value)\r\n            }\r\n         }\r\n         useEffect( () =>{\r\n             setTaskName(taskObj.Name)\r\n             setDescription(taskObj.Description)\r\n         },[])\r\n         const handleUpdate = (e) =>{\r\n             e.preventDefault();\r\n             let tempObj={}\r\n             tempObj['Name'] =taskName\r\n             tempObj['Description'] =description\r\n             updateTask(tempObj)\r\n\r\n         }\r\n\r\n    \r\n\r\n\t\r\n\treturn (\r\n\r\n\t\r\n            <Modal isOpen={modal} toggle={toggle}>\r\n                <ModalHeader\r\n                    toggle={toggle}>Update Task</ModalHeader>\r\n                <ModalBody>\r\n                     <form>\r\n                         <div className=\"form-group\">\r\n                            <label>Task Name</label>\r\n                            <input type=\"text\" className=\"form-control\" value={taskName} onChange ={handleChange} name=\"taskName\"/>\r\n\r\n                         </div>\r\n                         <div className=\"form-group\">\r\n                             <label>Description</label>\r\n                             <textarea rows=\"5\" className=\"form-control\" value={description} onChange ={handleChange} name=\"description\"/>\r\n                         </div>\r\n\r\n\r\n\r\n\r\n                     </form>\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button color=\"primary\" onClick={handleUpdate}>Update</Button>\r\n                    <Button color=\"secondary\"onClick={handleUpdate}>Cancel</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\r\n\t);\r\n}\r\n\r\n\r\n\r\n    \r\nexport default EditTask\r\n","import React,{useState} from 'react'\r\nimport EditTask from '../Modals/EditTask'\r\n\r\nconst Card = ({taskObj,index,deleteTask,updateListArray}) => {\r\n    const [modal,setModal] = useState (false);\r\n\r\n    const colors=[\r\n        {\r\n            primaryColor:\"#DB2929\",\r\n            secondaryColor: \"#FBE9E9\t\"\r\n        },\r\n        {\r\n            primaryColor:\"#FF7D40\",\r\n            secondaryColor: \"#FFC8AE\"\r\n        },\r\n        {\r\n            primaryColor:\"#8E8E38\",\r\n            secondaryColor: \"#DDDDA8\"\r\n        },\r\n        {\r\n            primaryColor:\"#2FAA96\t\",\r\n            secondaryColor: \"#A5E6DC\"\r\n        },\r\n        {\r\n            primaryColor:\"#FF92BB\",\r\n            secondaryColor: \"#E7A7BF\"\r\n        }\r\n\r\n    ]\r\n    const toggle = () =>{\r\n        setModal(!modal)\r\n    }\r\n    const updateTask = (obj) =>{\r\n        updateListArray(obj,index)\r\n        \r\n    }\r\n    const handleDelete= () =>{\r\n        deleteTask(index)\r\n    }\r\n    return (\r\n        <div class=\"card \" >\r\n            <div class=\"card-top\" style = {{backgroundColor : colors[index%5].primaryColor}}></div>\r\n  \r\n  <div class=\"card-body\">\r\n   <span class=\"card-header\"style = {{backgroundColor : colors[index%5].secondaryColor}}>{taskObj.Name}</span>\r\n    \r\n    <p class=\"card-text\">{taskObj.Description}</p>\r\n    <div style={{position : \"absolute\" , right : \"20px\" ,bottom : \"20px\"}}>\r\n    <i class=\"fas fa-trash-alt p-2 \" style = {{color : colors[index%5].primaryColor, cursor:\"pointer\" , fontSize:\"20px\"}} onClick={handleDelete}></i>\r\n    <i class=\"fas fa-edit p-2\" style = {{color : colors[index%5].primaryColor,cursor:\"pointer\",fontSize:\"20px\"}}onClick={()=>setModal(true)}></i>\r\n    </div>\r\n  </div>\r\n  <EditTask modal={modal} toggle={toggle} updateTask = {updateTask} taskObj={taskObj}/>\r\n</div>\r\n    )\r\n}\r\nexport default Card\r\n","import React, {useEffect, useState} from 'react'\r\nimport CreateTask from '../Modals/CreateTask'\r\n\r\nimport Card from './Card';\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const[taskList, setTaskList] = useState([])\r\n  \r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n        \r\n        if(arr){\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    } , [])\r\n    const deleteTask = (index) =>{\r\n        let tempList = taskList\r\n        tempList.splice(index,1)\r\n        localStorage.setItem(\"taskList\" , JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n\r\n    }\r\n    const updateListArray=(obj,index) =>{\r\n        let tempList =taskList\r\n        tempList[index]=obj\r\n        localStorage.setItem(\"taskList\",JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n\r\n\r\n    }\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    };\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\" , JSON.stringify(tempList))\r\n        setModal(false)\r\n        setTaskList(taskList)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <div className=\" header text-center\">\r\n             <h1 >Todo List</h1>\r\n            <button className=\"btn btn-primary mt-3\" onClick = {() => setModal(true)} > Create Task</button>\r\n        </div>\r\n        <div className=\"task-container\">\r\n            {taskList && taskList.map((obj,index)  => <Card taskObj={obj} index = {index} deleteTask ={deleteTask} updateListArray={updateListArray}/>)}\r\n\r\n        </div>\r\n       <CreateTask  toggle = {toggle} modal = {modal} save = {saveTask}/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","import logo from './logo.svg';\nimport './App.css';\nimport TodoList from './Components/TodoList';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nfunction App() {\n  return (\n    <div className=\"App\">\n     <TodoList />\n     \n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}